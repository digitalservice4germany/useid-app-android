default_platform(:android)

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(tasks: ["clean", "testDeviceDebugUnitTest"])
    gradle(tasks: ["connectedDeviceDebugAndroidTest", "--info"])
  end

  desc "Run Android linter and ktlint"
  lane :lint do
    gradle(tasks: ["clean", "lintKotlinMain", "lintDeviceDebug", "lintPreviewDebug"])
  end

  desc 'Bump version'
  lane :bumpVersion do |options|
    skip_docs
    ensure_git_status_clean
    
    bumpBuildNumber = ENV['BUMP_BUILD_NUMBER'] || options[:bumpBuildNumber] || false
    version = ENV['VERSION'] || options[:version]

    puts "Bumping version with version:#{version} bumpBuildNumber:#{bumpBuildNumber}"
    
    oldTag = "#{android_get_version_name}-#{android_get_version_code}"
    unless version&.empty?
      android_set_version_name(version_name: version)
    end
    if bumpBuildNumber
      increment_version_code(gradle_file_path: "app/build.gradle")
    end
    newTag = "#{android_get_version_name}-#{android_get_version_code}"

    puts "Writing new tag #{newTag} to github env: #{ENV['GITHUB_ENV']}"
    sh("echo 'GIT_TAG=#{newTag}' >> #{ENV['GITHUB_ENV']}")

    return if oldTag == newTag

    git_commit(path: "app/build.gradle", message: "Bump version to #{newTag}")
    add_git_tag(tag: newTag)
    push_to_git_remote(tags: false, push_options: ["tag #{newTag}"])
  end

  desc "Create new Playstore build and submit to Google Play Store"
  lane :release do |options|
    skip_docs
    
    if options[:stage] == 'preview' then
      previewRelease()
      next
    end

    if options[:stage] == 'production' then
      productionRelease()
      next
    end
  end

  desc "Create new Playstore preview build and submit to Google Play Store"
  lane :previewRelease do
    skip_docs
    buildAndSubmit(flavor: 'preview', package_name: 'de.digitalService.useID.Preview')
  end

  desc "Create new Playstore production build and submit to Google Play Store"
  lane :productionRelease do
    skip_docs
    buildAndSubmit(flavor: 'device', package_name: 'de.digitalService.useID')
  end

  desc "Create new Playstore build and submit to Google Play Store"
  lane :buildAndSubmit do |options|
    skip_docs
    ensure_git_status_clean

    gradle(
      task: 'bundle',
      flavor: options[:flavor],
      build_type: 'Release',
      properties: {
        "android.injected.signing.store.file" => ENV["KEYSTORE_PATH"],
        "android.injected.signing.store.password" => ENV["KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => "upload",
        "android.injected.signing.key.password" => ENV["UPLOAD_KEY_PASSWORD"]
      }
    )

    supply(
      track: 'internal',
      package_name: options[:package_name],
      json_key: ENV["FASTLANE_API_KEY_PATH"],
      release_status: 'draft',
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true,
      skip_upload_apk: true
    )
  end
end
